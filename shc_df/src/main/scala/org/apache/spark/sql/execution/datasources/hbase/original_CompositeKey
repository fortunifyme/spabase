object CompositeKey {


  /*  println("\n\n\n\n\n\n ************************* ==start try_1_35 valid  ************************* \n\n\n\n\n")
    def cat = s"""{
                      |"table":{"namespace":"default", "name":"shcExampleTable3", "tableCoder":"PrimitiveType"},
                      |"rowkey":"key1:key2",
                      |"columns":{
                        |"col00":{"cf":"rowkey", "col":"key1", "type":"string", "length":"6"},
                        |"col01":{"cf":"rowkey", "col":"key2", "type":"int"},
                        |"col1":{"cf":"cf1", "col":"col1", "type":"boolean"},
                        |"col2":{"cf":"cf2", "col":"col2", "type":"double"},
                        |"col3":{"cf":"cf3", "col":"col3", "type":"float"},
                        |"col4":{"cf":"cf4", "col":"col4", "type":"int"},
                        |"col5":{"cf":"cf5", "col":"col5", "type":"bigint"},
                        |"col6":{"cf":"cf6", "col":"col6", "type":"smallint"},
                        |"col7":{"cf":"cf7", "col":"col7", "type":"string"},
                        |"col8":{"cf":"cf8", "col":"col8", "type":"tinyint"}
                        |}
                      |}""".stripMargin*/

  println("\n\n\n\n\n\n ************************* ==start try_1_36 valid  ************************* \n\n\n\n\n")
  def cat = s"""{
               |"table":{"namespace":"default", "name":"shcExampleTable3", "tableCoder":"PrimitiveType"},
               |"rowkey":"key1:key2",
               |"columns":{
               |"col00":{"cf":"rowkey", "col":"key1", "type":"string", "length":"6"},
               |"col01":{"cf":"rowkey", "col":"key2", "type":"string"},
               |"col1":{"cf":"cf1", "col":"col1", "type":"boolean"},
               |"col2":{"cf":"cf2", "col":"col2", "type":"double"},
               |"col3":{"cf":"cf3", "col":"col3", "type":"float"},
               |"col4":{"cf":"cf4", "col":"col4", "type":"int"},
               |"col5":{"cf":"cf5", "col":"col5", "type":"bigint"},
               |"col6":{"cf":"cf6", "col":"col6", "type":"smallint"},
               |"col7":{"cf":"cf7", "col":"col7", "type":"string"},
               |"col8":{"cf":"cf8", "col":"col8", "type":"tinyint"}
               |}
               |}""".stripMargin

  def main(args: Array[String]){
    val spark = SparkSession.builder()
      .appName("CompositeKeyExample")
      .getOrCreate()

    val sc = spark.sparkContext
    val sqlContext = spark.sqlContext

    import sqlContext.implicits._

    def withCatalog(cat: String): DataFrame = {
      sqlContext
        .read
        .options(Map(HBaseTableCatalog.tableCatalog->cat))
        .format("org.apache.spark.sql.execution.datasources.hbase")
        .load()
    }

    /*  //populate table with composite key
      val data = (0 to 255).map { i =>
          HBaseCompositeRecord(i)
      }
      sc.parallelize(data).toDF.write.options(
        Map(HBaseTableCatalog.tableCatalog -> cat, HBaseTableCatalog.newTable -> "5"))
        .format("org.apache.spark.sql.execution.datasources.hbase")
        .save()*/

    //full query
    val df = withCatalog(cat)
    df.show
    if(df.count() != 256){
      throw new Exception("value invalid")
    }

    // filtered query1
    val s = df.filter($"col00" <= "row050" && $"col01" > 40)
      .select("col00", "col01","col1")
    s.show
    if(s.count() != 5){
      throw new Exception("value invalid")
    }

    //filtered query2. The number of results is 6
    df.filter($"col00" <= "row050" && $"col01" >= 40)
      .select("col00", "col01","col1").show

    //filtered query3". The number of results is 3
    df.filter($"col00" >= "row250" && $"col01" < 50)
      .select("col00", "col01","col1").show

    //filtered query4. The number of results is 11
    df.filter($"col00" <= "row010")    // row005 not included
      .select("col00", "col01","col1").show

    //filtered query5. The number of results is 1
    df.filter($"col00" === "row010")    // row005 not included
      .select("col00", "col01","col1").show

    //filtered query51. The number of results is 1
    df.filter($"col00" === "row011")    // row005 not included
      .select("col00", "col01","col1").show

    //filtered query52. The number of results is 1
    df.filter($"col00" === "row005")    // row005 not included
      .select("col00", "col01","col1")
      .show

    //filtered query6. The number of results is 22
    df.filter(($"col00" <= "row050" && $"col00" > "row040") ||
      $"col00" === "row010" || // no included, since it is composite key
      $"col00" === "row020" || // not inlcuded
      $"col00" ===  "r20" ||   // not included
      $"col00" <= "row010")    // row005 not included
      .select("col00", "col01","col1")
      .show

    //filtered query7. The number of results is 17
    df.filter(($"col00" <= "row050" && $"col00" > "row040") ||
      $"col00" === "row005" || // no included, since it is composite key
      $"col00" === "row020" || // not inlcuded
      $"col00" ===  "r20" ||   // not included
      $"col00" <= "row005")    // row005 not included
      .select("col00", "col01","col1")
      .show

    spark.stop()
  }
}


 println("\n\n\n\n\n\n ************************* ==start try_1_35 valid  ************************* \n\n\n\n\n")
  def cat = s"""{
                    |"table":{"namespace":"default", "name":"shcExampleTable3", "tableCoder":"PrimitiveType"},
                    |"rowkey":"key1:key2",
                    |"columns":{
                      |"col00":{"cf":"rowkey", "col":"key1", "type":"string", "length":"6"},
                      |"col01":{"cf":"rowkey", "col":"key2", "type":"int"},
                      |"col1":{"cf":"cf1", "col":"col1", "type":"boolean"},
                      |"col2":{"cf":"cf2", "col":"col2", "type":"double"},
                      |"col3":{"cf":"cf3", "col":"col3", "type":"float"},
                      |"col4":{"cf":"cf4", "col":"col4", "type":"int"},
                      |"col5":{"cf":"cf5", "col":"col5", "type":"bigint"},
                      |"col6":{"cf":"cf6", "col":"col6", "type":"smallint"},
                      |"col7":{"cf":"cf7", "col":"col7", "type":"string"},
                      |"col8":{"cf":"cf8", "col":"col8", "type":"tinyint"}
                      |}
                    |}""".stripMargin*/

/*  println("\n\n\n\n\n\n ** ==start try_1_38 there are output but problem with print col1 \n\n\n\n\n")
def cat = s"""{
                  |"table":{"namespace":"default", "name":"shcExampleTable3", "tableCoder":"PrimitiveType"},
                  |"rowkey":"key1:key2",
                  |"columns":{
                    |"col00":{"cf":"rowkey", "col":"key1", "type":"string", "length":"6"},
                    |"col01":{"cf":"rowkey", "col":"key2", "type":"string"},
                    |"col1":{"cf":"cf1", "col":"col1", "type":"boolean"},
                    |"col2":{"cf":"cf2", "col":"col2", "type":"double"},
                    |"col3":{"cf":"cf3", "col":"col3", "type":"float"},
                    |"col4":{"cf":"cf4", "col":"col4", "type":"int"},
                    |"col5":{"cf":"cf5", "col":"col5", "type":"bigint"},
                    |"col6":{"cf":"cf6", "col":"col6", "type":"smallint"},
                    |"col7":{"cf":"cf7", "col":"col7", "type":"string"},
                    |"col8":{"cf":"cf8", "col":"col8", "type":"tinyint"}
                    |}
                  |}""".stripMargin*/

/*  println("\n\n\n\n\n\n  ==start try_1_39 valid  ***  \n\n\n\n\n")
  def cat = s"""{
               |"table":{"namespace":"default", "name":"shcExampleTable3", "tableCoder":"PrimitiveType"},
               |"rowkey":"key1:key2",
               |"columns":{
               |"col00":{"cf":"rowkey", "col":"key1", "type":"string", "length":"6"},
               |"col01":{"cf":"rowkey", "col":"key2", "type":"int"},
               |"col1":{"cf":"cf1", "col":"col1", "type":"boolean"},
               |"col2":{"cf":"cf2", "col":"col2", "type":"double"},
               |"col3":{"cf":"cf3", "col":"col3", "type":"float"},
               |"col4":{"cf":"cf4", "col":"col4", "type":"int"},
               |"col5":{"cf":"cf5", "col":"col5", "type":"bigint"},
               |"col6":{"cf":"cf6", "col":"col6", "type":"smallint"},
               |"col7":{"cf":"cf7", "col":"col7", "type":"string"},
               |"col8":{"cf":"cf8", "col":"col8", "type":"tinyint"}
               |}
               |}""".stripMargin*/

/*println("\n\n\n  ==start try_1_40 still problem related to UTF-8  ***  \n\n\n")
def cat = s"""{
             |"table":{"namespace":"default", "name":"shcExampleTable3", "tableCoder":"PrimitiveType"},
             |"rowkey":"key1:key2",
             |"columns":{
             |"col00":{"cf":"rowkey", "col":"key1", "type":"string", "length":"6"},
             |"col01":{"cf":"rowkey", "col":"key2", "type":"string"},
             |"col1":{"cf":"cf1", "col":"col1", "type":"boolean"},
             |"col2":{"cf":"cf2", "col":"col2", "type":"double"},
             |"col3":{"cf":"cf3", "col":"col3", "type":"float"},
             |"col4":{"cf":"cf4", "col":"col4", "type":"int"},
             |"col5":{"cf":"cf5", "col":"col5", "type":"bigint"},
             |"col6":{"cf":"cf6", "col":"col6", "type":"smallint"},
             |"col7":{"cf":"cf7", "col":"col7", "type":"string"},
             |"col8":{"cf":"cf8", "col":"col8", "type":"tinyint"}
             |}
             |}""".stripMargin*/
// "col02":{"cf":"rowkey", "col":"key3", "type":"int"},
/*println("\n\n\n  ==start try_1_41 valid   ***  \n\n\n")
def cat = s"""{
             |"table":{"namespace":"default", "name":"shcExampleTable3", "tableCoder":"PrimitiveType"},
             |"rowkey":"key1:key2:key3",
             |"columns":{
             |"col00":{"cf":"rowkey", "col":"key1", "type":"string", "length":"6"},
             |"col01":{"cf":"rowkey", "col":"key2", "type":"int"},
             |"col1":{"cf":"cf1", "col":"col1", "type":"boolean"},
             |"col2":{"cf":"cf2", "col":"col2", "type":"double"},
             |"col3":{"cf":"cf3", "col":"col3", "type":"float"},
             |"col4":{"cf":"cf4", "col":"col4", "type":"int"},
             |"col5":{"cf":"cf5", "col":"col5", "type":"bigint"},
             |"col6":{"cf":"cf6", "col":"col6", "type":"smallint"},
             |"col7":{"cf":"cf7", "col":"col7", "type":"string"},
             |"col8":{"cf":"cf8", "col":"col8", "type":"tinyint"}
             |}
             |}""".stripMargin*/

/*  println("\n\n\n  ==start try_1_43 - valid  incorrect number of keys   and try to read with several columns ( in schema describ )   ***  \n\n\n")
  def cat = s"""{
               |"table":{"namespace":"default", "name":"shcExampleTable3", "tableCoder":"PrimitiveType"},
               |"rowkey":"key1:key2:key3",
               |"columns":{
               |"col00":{"cf":"rowkey", "col":"key1", "type":"string", "length":"6"},
               |"col01":{"cf":"rowkey", "col":"key2", "type":"int"},
               |"col1":{"cf":"cf1", "col":"col1", "type":"boolean"},
               |"col2":{"cf":"cf2", "col":"col2", "type":"double"},
               |"col3":{"cf":"cf3", "col":"col3", "type":"float"},
               |"col8":{"cf":"cf8", "col":"col8", "type":"tinyint"}
               |}
               |}""".stripMargin*/

/*  println("\n\n\n  ==start try_1_44 - try to read with incorrect datatype of the column but correct data type for the" +
    " keys  result : output exists but UTF-8 related problem  ***  \n\n\n")
def cat = s"""{
             |"table":{"namespace":"default", "name":"shcExampleTable3", "tableCoder":"PrimitiveType"},
             |"rowkey":"key1:key2:key3",
             |"columns":{
             |"col00":{"cf":"rowkey", "col":"key1", "type":"string", "length":"6"},
             |"col01":{"cf":"rowkey", "col":"key2", "type":"int"},
             |"col1":{"cf":"cf1", "col":"col1", "type":"string"},
             |"col2":{"cf":"cf2", "col":"col2", "type":"string"},
             |"col3":{"cf":"cf3", "col":"col3", "type":"string"},
             |"col8":{"cf":"cf8", "col":"col8", "type":"string"}
             |}
             |}""".stripMargin*/

/*println("\n\n\n  ==start try_1_45 - add one more key column that actually didn't exist" +
  " result : no exeptions but UTF-8 problem  ***  \n\n\n")
def cat = s"""{
             |"table":{"namespace":"default", "name":"shcExampleTable3", "tableCoder":"PrimitiveType"},
             |"rowkey":"key1:key2:key3",
             |"columns":{
             |"col00":{"cf":"rowkey", "col":"key1", "type":"string", "length":"6"},
             |"col01":{"cf":"rowkey", "col":"key2", "type":"int"},
             |"col02":{"cf":"rowkey", "col":"key3", "type":"string"},
             |"col1":{"cf":"cf1", "col":"col1", "type":"string"},
             |"col2":{"cf":"cf2", "col":"col2", "type":"string"},
             |"col3":{"cf":"cf3", "col":"col3", "type":"string"},
             |"col8":{"cf":"cf8", "col":"col8", "type":"string"}
             |}
             |}""".stripMargin*/

/*println("\n\n\n  ==start try_1_46 - change from cf to=>cf1" +
  " result : no critical exceptions => there're some output   ***  \n\n\n")
def cat = s"""{
             |"table":{"namespace":"default", "name":"shcExampleTable3", "tableCoder":"PrimitiveType"},
             |"rowkey":"key1:key2:key3",
             |"columns":{
             |"col00":{"cf1":"rowkey", "col":"key1", "type":"string", "length":"6"},
             |"col01":{"cf":"rowkey", "col":"key2", "type":"int"},
             |"col02":{"cf":"rowkey", "col":"key3", "type":"string"},
             |"col1":{"cf":"cf1", "col":"col1", "type":"string"},
             |"col2":{"cf":"cf2", "col":"col2", "type":"string"},
             |"col3":{"cf":"cf3", "col":"col3", "type":"string"},
             |"col8":{"cf":"cf8", "col":"col8", "type":"string"}
             |}
             |}""".stripMargin*/

/* println("\n\n\n  ==start try_1_47 - change from col1 to=>col111" +
   " result : no critical exceptions => there're some output without data in it    ***  \n\n\n")
 def cat = s"""{
              |"table":{"namespace":"default", "name":"shcExampleTable3", "tableCoder":"PrimitiveType"},
              |"rowkey":"key1:key2:key3",
              |"columns":{
              |"col00":{"cf1":"rowkey", "col":"key1", "type":"string", "length":"6"},
              |"col01":{"cf":"rowkey", "col":"key2", "type":"int"},
              |"col02":{"cf":"rowkey", "col":"key3", "type":"string"},
              |"col1":{"cf":"cf1", "col":"col111", "type":"string"},
              |"col2":{"cf":"cf2", "col":"col2", "type":"string"},
              |"col3":{"cf":"cf3", "col":"col3", "type":"string"},
              |"col8":{"cf":"cf8", "col":"col8", "type":"string"}
              |}
              |}""".stripMargin*/

/*println("\n\n\n  ==start try_1_47 - change from key2 to=>key22" +
  " result : no critical exceptions => there're some output last table without data in it   ***  \n\n\n")
def cat = s"""{
             |"table":{"namespace":"default", "name":"shcExampleTable3", "tableCoder":"PrimitiveType"},
             |"rowkey":"key1:key2:key3",
             |"columns":{
             |"col00":{"cf1":"rowkey", "col":"key1", "type":"string", "length":"6"},
             |"col01":{"cf":"rowkey", "col":"key22", "type":"int"},
             |"col02":{"cf":"rowkey", "col":"key3", "type":"string"},
             |"col1":{"cf":"cf1", "col":"col111", "type":"string"},
             |"col2":{"cf":"cf2", "col":"col2", "type":"string"},
             |"col3":{"cf":"cf3", "col":"col3", "type":"string"},
             |"col8":{"cf":"cf8", "col":"col8", "type":"string"}
             |}
             |}""".stripMargin*/



 /* println("\n\n\n  ==start try_1_47 - change all in apply function on String and datatype also string in case class " +
     " result : no critical exceptions => there're some output last table without data in it   ***  \n\n\n")
   def cat = s"""{
                |"table":{"namespace":"default", "name":"shcExampleTable3", "tableCoder":"PrimitiveType"},
                |"rowkey":"key1:key2:key3",
                |"columns":{
                |"col00":{"cf1":"rowkey", "col":"key1", "type":"string", "length":"6"},
                |"col01":{"cf":"rowkey", "col":"key22", "type":"int"},
                |"col02":{"cf":"rowkey", "col":"key3", "type":"string"},
                |"col1":{"cf":"cf1", "col":"col111", "type":"string"},
                |"col2":{"cf":"cf2", "col":"col2", "type":"string"},
                |"col3":{"cf":"cf3", "col":"col3", "type":"string"},
                |"col8":{"cf":"cf8", "col":"col8", "type":"string"}
                |}
                |}""".stripMargin*/

  /* println("\n\n\n  ==start try_1_48 - change all to String data type   " +
     " result : no critical exceptions => there're some output last table without data in it   ***  \n\n\n")
   def cat = s"""{
                |"table":{"namespace":"default", "name":"shcExampleTable3", "tableCoder":"PrimitiveType"},
                |"rowkey":"key1:key2:key3",
                |"columns":{
                |"col00":{"cf1":"rowkey", "col":"key1", "type":"string", "length":"6"},
                |"col01":{"cf":"rowkey", "col":"key22", "type":"string"},
                |"col02":{"cf":"rowkey", "col":"key3", "type":"string"},
                |"col1":{"cf":"cf1", "col":"col111", "type":"string"},
                |"col2":{"cf":"cf2", "col":"col2", "type":"string"},
                |"col3":{"cf":"cf3", "col":"col3", "type":"string"},
                |"col8":{"cf":"cf8", "col":"col8", "type":"string"}
                |}
                |}""".stripMargin*/


  /* println("\n\n\n  ==start try_1_49 - without keys (completely )    " +
     " result :  critical exceptions => Exception in thread "main" java.util.NoSuchElementException: None.get   ***  \n\n\n")
   def cat = s"""{
                |"table":{"namespace":"default", "name":"shcExampleTable3", "tableCoder":"PrimitiveType"},
                |"columns":{
                |"col1":{"cf":"cf1", "col":"col111", "type":"string"},
                |"col2":{"cf":"cf2", "col":"col2", "type":"string"},
                |"col3":{"cf":"cf3", "col":"col3", "type":"string"},
                |"col8":{"cf":"cf8", "col":"col8", "type":"string"}
                |}
                |}""".stripMargin*/

 /*  println("\n\n\n  ==start try_1_50 - without keys in output but with rowkey:key1:key2    " +
     " result :  critical exceptions => Exception in thread \"main\" java.lang.UnsupportedOperationException: empty.tail   ***  \n\n\n")
   def cat = s"""{
                |"table":{"namespace":"default", "name":"shcExampleTable3", "tableCoder":"PrimitiveType"},
                |"rowkey":"key1:key2:key3",
                |"columns":{
                |"col1":{"cf":"cf1", "col":"col111", "type":"string"},
                |"col2":{"cf":"cf2", "col":"col2", "type":"string"},
                |"col3":{"cf":"cf3", "col":"col3", "type":"string"},
                |"col8":{"cf":"cf8", "col":"col8", "type":"string"}
                |}
                |}""".stripMargin*/

   /*println("\n\n\n  ==start try_1_51 - with keys but incorrect key(key22) in output and with rowkey:key1:key2    " +
     " result :  critical exceptions => Exception in thread \"main\" java.lang.UnsupportedOperationException: empty.tail   ***  \n\n\n")
   def cat = s"""{
                |"table":{"namespace":"default", "name":"shcExampleTable3", "tableCoder":"PrimitiveType"},
                |"rowkey":"key1:key2:key3",
                |"columns":{
                |"col01":{"cf":"rowkey", "col":"key22", "type":"string"},
                |"col1":{"cf":"cf1", "col":"col111", "type":"string"},
                |"col2":{"cf":"cf2", "col":"col2", "type":"string"},
                |"col3":{"cf":"cf3", "col":"col3", "type":"string"},
                |"col8":{"cf":"cf8", "col":"col8", "type":"string"}
                |}
                |}""".stripMargin*/

  /* println("\n\n\n  ==start try_1_52 - with keys but incorrect key(key22) in output and with rowkey:key1    " +
     " result :  critical exceptions => Exception in thread \"main\" java.lang.UnsupportedOperationException: empty.tail   ***  \n\n\n")
   def cat = s"""{
                |"table":{"namespace":"default", "name":"shcExampleTable3", "tableCoder":"PrimitiveType"},
                |"rowkey":"key1",
                |"columns":{
                |"col01":{"cf":"rowkey", "col":"key22", "type":"string"},
                |"col1":{"cf":"cf1", "col":"col111", "type":"string"},
                |"col2":{"cf":"cf2", "col":"col2", "type":"string"},
                |"col3":{"cf":"cf3", "col":"col3", "type":"string"},
                |"col8":{"cf":"cf8", "col":"col8", "type":"string"}
                |}
                |}""".stripMargin
 */
   /*println("\n\n\n  ==start try_1_53 - with keys correct key(key1) without composite key     " +
     " result : no critical exceptions => output with UTF-8 Problem   ***  \n\n\n")
   def cat = s"""{
                |"table":{"namespace":"default", "name":"shcExampleTable3", "tableCoder":"PrimitiveType"},
                |"rowkey":"key1",
                |"columns":{
                |"col01":{"cf":"rowkey", "col":"key1", "type":"string"},
                |"col1":{"cf":"cf1", "col":"col111", "type":"string"},
                |"col2":{"cf":"cf2", "col":"col2", "type":"string"},
                |"col3":{"cf":"cf3", "col":"col3", "type":"string"},
                |"col8":{"cf":"cf8", "col":"col8", "type":"string"}
                |}
                |}""".stripMargin*/

   /*println("\n\n\n  ==start try_1_54 - change rowkey=>rowkey1 and write such table    " +
     " result :  critical exceptions => Exception in thread \"main\" java.util.NoSuchElementException: None.get   ***  \n\n\n")
   def cat = s"""{
                |"table":{"namespace":"default", "name":"shcExampleTable4", "tableCoder":"PrimitiveType"},
                |"rowkey1":"key1",
                |"columns":{
                |"col01":{"cf":"rowkey1", "col":"key1", "type":"string"},
                |"col1":{"cf":"cf1", "col":"col111", "type":"string"},
                |"col2":{"cf":"cf2", "col":"col2", "type":"string"},
                |"col3":{"cf":"cf3", "col":"col3", "type":"string"},
                |"col8":{"cf":"cf8", "col":"col8", "type":"string"}
                |}
                |}""".stripMargin*/


   /*println("\n\n\n  ==start try_1_55 - try to read WEB_STAT     " +
     " result :  critical exceptions => Exception in thread \"main\" java.lang.Exception: PrimitiveType: only the last dimension of RowKey is allowed to have varied length. You may want to add 'length' to the dimensions which have varied length or use dimensions which are scala/java primitive data types of fixed length.  ***  \n\n\n")
   def cat = s"""{
                |"table":{"namespace":"default", "name":"WEB_STAT", "tableCoder":"PrimitiveType"},
                |"rowkey":"HOST:DOMAIN:FEATURE:DATE",
                |"columns":{
                |"col00":{"cf":"rowkey", "col":"HOST", "type":"string" },
                |"col01":{"cf":"rowkey", "col":"DOMAIN", "type":"string" },
                |"col02":{"cf":"rowkey", "col":"FEATURE", "type":"string" },
                |"col03":{"cf":"rowkey", "col":"DATE", "type":"string"},
                |"col1":{"cf":"USAGE", "col":"DB", "type":"string"},
                |"col2":{"cf":"USAGE", "col":"CORE", "type":"string"},
                |"col3":{"cf":"STATS", "col":"ACTIVE_VISITOR", "type":"string"}
                |}
                |}""".stripMargin*/



  /*println("\n\n\n  ==start try_1_56 - try to read WEB_STAT keys with limited length    " +
    " result : no critical exceptions => output with UTF-8 problem => SUCCESS !!!   ***  \n\n\n")
  def cat = s"""{
               |"table":{"namespace":"default", "name":"WEB_STAT", "tableCoder":"PrimitiveType"},
               |"rowkey":"HOST:DOMAIN:FEATURE:DATE",
               |"columns":{
               |"col00":{"cf":"rowkey", "col":"HOST", "type":"string", "length":"16" },
               |"col01":{"cf":"rowkey", "col":"DOMAIN", "type":"string" , "length":"16"},
               |"col02":{"cf":"rowkey", "col":"FEATURE", "type":"string" , "length":"16"},
               |"col03":{"cf":"rowkey", "col":"DATE", "type":"string", "length":"16"},
               |"col1":{"cf":"USAGE", "col":"DB", "type":"string"},
               |"col2":{"cf":"USAGE", "col":"CORE", "type":"string"},
               |"col3":{"cf":"STATS", "col":"ACTIVE_VISITOR", "type":"string"}
               |}
               |}""".stripMargin*/